import numpy as np
import numpy.matlib
import math
from sklearn import datasets
#load in iris
iris=datasets.load_iris()


def linearleastsquares(trainpercent,lmbda):

    setosa=iris.data[(iris.target==0)]
    versicolor=iris.data[(iris.target==1)]
    virginica=iris.data[(iris.target==2)]
    np.random.shuffle(setosa)
    np.random.shuffle(versicolor)
    np.random.shuffle(virginica)

    N=50
    v=int(50*(trainpercent/100))

    setosaTrain=setosa[0:v,:]
    setosaTest=setosa[v:50,:]


    versicolorTrain=versicolor[0:v,:]
    versicolorTest=versicolor[v:50,:]

    virginicaTrain=virginica[0:v,:]
    virginicaTest=virginica[v:50,:]

    y1=[];y2=[];y3=[]

    #everything in our training set
    for i in range(0,v):
        y1.append([1,0,0]);
        y2.append([0,1,0]);
        y3.append([0,0,1]);

    train=np.concatenate([setosaTrain,versicolorTrain,virginicaTrain])
    test=np.concatenate([setosaTest,versicolorTest,virginicaTest])

    trainone=np.ones((150*(trainpercent/100),1))

    testone=np.ones((150*((100-trainpercent)/100),1))

    #combine setosa, versicolor and virginica together to
    # form the training matrix, with 1s on the end
    Xtrain=np.hstack((train,trainone))
    [ m , n] = Xtrain.shape
    Xtest=np.hstack((test,testone))
    XtrainTransposed=Xtrain.T

    X2=np.dot(XtrainTransposed,Xtrain)
    #create identity matrix with lambdas on diagonal
    #This 5 is the number of
    id=lmbda*np.matlib.identity(n)

    X2PlusLambda=X2+id
    X2PlusLambdaInv=np.mat(X2PlusLambda).I
    #Hey, maybe changeg the "inter" dot product below, to be X2LambdaInv
    # with (yi*xi)... look at the slides, mod12 part2
    inter=np.dot(X2PlusLambdaInv,XtrainTransposed)
    Y=np.concatenate([y1,y2,y3])
    theta=np.dot(inter,Y)


    trainx=np.full((len(setosaTrain),1),0,dtype=np.int)
    trainy=np.full((len(versicolorTrain),1),1,dtype=np.int)
    trainz=np.full((len(virginicaTrain),1),2,dtype=np.int)
    trainclass=np.concatenate([trainx,trainy,trainz])


    targetx=np.full((len(setosaTest),1),0,dtype=np.int)
    targety=np.full((len(versicolorTest),1),1,dtype=np.int)
    targetz=np.full((len(virginicaTest),1),2,dtype=np.int)
    testclass=np.concatenate([targetx,targety,targetz])

    predictiontest=np.dot(Xtest,theta)


    predictclasstest=np.argmax(predictiontest,axis=1)
    misclassificationError=0

    for i in range(0,(len(predictclasstest))):


        if predictclasstest[i]!=testclass[i]:
            misclassificationError +=1
    totalError=misclassificationError/(len(predictclasstest))
    print(round(totalError,4)*100)

    predictiontraining=np.dot(Xtrain,theta)


    predictclasstraining=np.argmax(predictiontraining,axis=1)
    misclassificationErrorTrain=0


    for i in range(0,(len(predictclasstraining))):


        if predictclasstraining[i]!=trainclass[i]:
            misclassificationErrorTrain +=1
    totalErrorTrain=misclassificationErrorTrain/(len(predictclasstraining))
    print(round(totalErrorTrain,4)*100)


linearleastsquares(10,math.pow(10,-8));
linearleastsquares(30,math.pow(10,-8));
linearleastsquares(50,math.pow(10,-8));